// Copyright 2015 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ingore

package main

// This program generates z_benchmark_test.go. Invoke it as
//	go run gen.go -output z_benchmark_test.go

import (
	"bytes"
	"flag"
	"fmt"
	"go/format"
	"io"
	"io/ioutil"
	"log"
	"path/filepath"
	"strings"
)

var (
	flagOutputFilename = flag.String("output", "z_benchmark_test.go", "output file name")
)

var testFilenames = []string{
	"empty8000x6000.png",
	//"lena512color.bpg",
	//"lena512color.jpeg.tiff",
	"lena512color.png",
	"lena512color.tiff",
	"video-001-16bit.tiff",
	"video-001-gray-16bit.tiff",
	"video-001-gray.tiff",
	"video-001-paletted.tiff",
	"video-001-strip-64.tiff",
	"video-001-tile-64x64.tiff",
	"video-001-uncompressed.tiff",
	"video-001.bmp",
	"video-001.jpeg",
	//"video-001.lossy.webp",
	"video-001.png",
	"video-001.tiff",
	//"video-001.webp",
}

func main() {
	flag.Parse()

	var buf bytes.Buffer
	printHeader(&buf, *flagOutputFilename)
	for _, filename := range testFilenames {
		printTestCase(&buf, filename)
	}

	data, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	err = ioutil.WriteFile(*flagOutputFilename, data, 0644)
	if err != nil {
		log.Fatal(err)
	}
}

func printHeader(w io.Writer, outputFilename string) {
	fmt.Fprintf(w, `
// Copyright 2015 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// generated by go run gen.go -output %s; DO NOT EDIT

package gdal_bench

import (
	"bytes"
	"image"
	_ "image/png"
	_ "image/jpeg"
	"io/ioutil"
	"testing"

	"github.com/chai2010/gdal"
	_ "golang.org/x/image/bmp"
	_ "golang.org/x/image/tiff"
)

func tbLoadData(tb testing.TB, filename string) []byte {
	data, err := ioutil.ReadFile("../testdata/" + filename)
	if err != nil {
		tb.Fatal(err)
	}
	return data
}

`[1:], outputFilename)
}

func printTestCase(w io.Writer, filename string) {
	s := `
func BenchmarkLoad_{{.goodBaseName}}_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/{{.filename}}")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_{{.goodBaseName}}_std(b *testing.B) {
	data := tbLoadData(b, "{{.filename}}")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

`
	s = strings.Replace(s, "{{.goodBaseName}}", goodBaseName(filename), -1)
	s = strings.Replace(s, "{{.filename}}", filename, -1)
	fmt.Fprintln(w, s)
}

func goodBaseName(name string) string {
	name = filepath.Base(name)
	temp := []rune(name)
	for i := 0; i < len(temp); i++ {
		switch temp[i] {
		case '.', '-':
			temp[i] = '_'
		}
	}
	return string(temp)
}

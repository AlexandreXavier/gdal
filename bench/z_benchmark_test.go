// Copyright 2015 <chaishushan{AT}gmail.com>. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// generated by go run gen.go -output z_benchmark_test.go; DO NOT EDIT

package gdal_bench

import (
	"bytes"
	"image"
	_ "image/jpeg"
	_ "image/png"
	"io/ioutil"
	"testing"

	"github.com/chai2010/gdal"
	_ "golang.org/x/image/bmp"
	_ "golang.org/x/image/tiff"
)

func tbLoadData(tb testing.TB, filename string) []byte {
	data, err := ioutil.ReadFile("../testdata/" + filename)
	if err != nil {
		tb.Fatal(err)
	}
	return data
}

func BenchmarkLoad_empty8000x6000_png_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/empty8000x6000.png")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_empty8000x6000_png_std(b *testing.B) {
	data := tbLoadData(b, "empty8000x6000.png")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_lena512color_png_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/lena512color.png")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_lena512color_png_std(b *testing.B) {
	data := tbLoadData(b, "lena512color.png")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_lena512color_tiff_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/lena512color.tiff")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_lena512color_tiff_std(b *testing.B) {
	data := tbLoadData(b, "lena512color.tiff")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_16bit_tiff_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001-16bit.tiff")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_16bit_tiff_std(b *testing.B) {
	data := tbLoadData(b, "video-001-16bit.tiff")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_gray_16bit_tiff_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001-gray-16bit.tiff")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_gray_16bit_tiff_std(b *testing.B) {
	data := tbLoadData(b, "video-001-gray-16bit.tiff")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_gray_tiff_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001-gray.tiff")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_gray_tiff_std(b *testing.B) {
	data := tbLoadData(b, "video-001-gray.tiff")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_paletted_tiff_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001-paletted.tiff")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_paletted_tiff_std(b *testing.B) {
	data := tbLoadData(b, "video-001-paletted.tiff")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_strip_64_tiff_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001-strip-64.tiff")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_strip_64_tiff_std(b *testing.B) {
	data := tbLoadData(b, "video-001-strip-64.tiff")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_tile_64x64_tiff_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001-tile-64x64.tiff")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_tile_64x64_tiff_std(b *testing.B) {
	data := tbLoadData(b, "video-001-tile-64x64.tiff")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_uncompressed_tiff_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001-uncompressed.tiff")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_uncompressed_tiff_std(b *testing.B) {
	data := tbLoadData(b, "video-001-uncompressed.tiff")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_bmp_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001.bmp")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_bmp_std(b *testing.B) {
	data := tbLoadData(b, "video-001.bmp")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_jpeg_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001.jpeg")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_jpeg_std(b *testing.B) {
	data := tbLoadData(b, "video-001.jpeg")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_png_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001.png")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_png_std(b *testing.B) {
	data := tbLoadData(b, "video-001.png")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_tiff_gdal(b *testing.B) {
	for i := 0; i < b.N; i++ {
		m, err := gdal.Load("../testdata/video-001.tiff")
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}

func BenchmarkLoad_video_001_tiff_std(b *testing.B) {
	data := tbLoadData(b, "video-001.tiff")
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		m, _, err := image.Decode(bytes.NewReader(data))
		if err != nil {
			b.Fatal(err)
		}
		_ = m
	}
}
